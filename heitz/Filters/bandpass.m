function filtered_signal = bandpass(sig,band)
%BANDSTOP Returns a discrete-time filter object.

%
% M-File generated by MATLAB(R) 7.6 and the Signal Processing Toolbox 6.9.
%
% Generated on: 06-Aug-2008 14:00:54
%

% Butterworth Bandstop filter designed using FDESIGN.BANDSTOP.

% All frequency values are in Hz.
% Fs = 1000;                  % Sampling Frequency
%
% Fpass1 = band(1)-1;         % First Passband Frequency
% Fstop1 = band(1);           % First Stopband Frequency
% Fstop2 = band(2);           % Second Stopband Frequency
% Fpass2 = band(2)+1;         % Second Passband Frequency
% Apass1 = 1;                 % First Passband Ripple (dB)
%
% %is this attenuation too high?
% Astop  = 120;               % Stopband Attenuation (dB)
% Apass2 = 1;                 % Second Passband Ripple (dB)
% match  = 'stopband';        % Band to match exactly
%
% % Construct an FDESIGN object and call its BUTTER method.
% h  = fdesign.bandstop(Fpass1, Fstop1, Fstop2, Fpass2, Apass1, Astop, ...
%                       Apass2, Fs);
% Hd = design(h, 'butter', 'MatchExactly', match);
%
% disp(['Bandstop Filter with ' mat2str(Astop) 'db attenutation'])
% filtered_signal = filter(Hd,sig);

parallelFlag = 0;
if matlabpool('size') > 0; parallelFlag = 1; end

Order = 20;
Fs = 1000;

[b a] = fir1(Order,[(band(1)/(Fs/2)) band(2)/(Fs/2)]);

%if matrix, do trial-by-trial; otherwise, just filter vector
if isvector(sig)
    filtered_signal = filtfilt(b,a,sig);
else
    if parallelFlag
        parfor trl = 1:size(sig,1)
            sig(trl,:) = filtfilt(b,a,sig(trl,:));
        end
    else
        for trl = 1:size(sig,1)
            sig(trl,1:size(sig,2)) = filtfilt(b,a,sig(trl,:));
        end
    end
    filtered_signal = sig;
end